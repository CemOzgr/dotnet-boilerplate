openapi: 3.0.3
info:
  title: Mock Server API
  description: Comprehensive API specification for full-stack development
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3001/api/v1
    description: Development mock server (HTTP)
  - url: https://localhost:3443/api/v1
    description: Development mock server (HTTPS)
  - url: https://api.example.com/v1
    description: Production server

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
        details:
          type: object
          description: Additional error details
      required:
        - error
        - code

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
        email:
          type: string
          format: email
          description: User email address
        username:
          type: string
          description: Username
        firstName:
          type: string
          description: First name
        lastName:
          type: string
          description: Last name
        avatar:
          type: string
          format: uri
          description: Avatar URL
        role:
          type: string
          enum: [admin, user, moderator]
          description: User role
        isActive:
          type: boolean
          description: Account status
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
      required:
        - id
        - email
        - username
        - role
        - isActive

    AuthTokens:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token
        refreshToken:
          type: string
          description: JWT refresh token
        expiresIn:
          type: number
          description: Token expiration in seconds
        tokenType:
          type: string
          default: Bearer
          description: Token type
      required:
        - accessToken
        - refreshToken
        - expiresIn

    UserSettings:
      type: object
      properties:
        theme:
          type: string
          enum: [light, dark, auto]
          default: auto
        language:
          type: string
          default: en
        timezone:
          type: string
          default: UTC
        notifications:
          type: object
          properties:
            email:
              type: boolean
              default: true
            push:
              type: boolean
              default: true
            sms:
              type: boolean
              default: false
        preferences:
          type: object
          additionalProperties: true

    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        message:
          type: string
        type:
          type: string
          enum: [info, success, warning, error]
        isRead:
          type: boolean
          default: false
        createdAt:
          type: string
          format: date-time
        metadata:
          type: object
          additionalProperties: true
      required:
        - id
        - title
        - message
        - type

    FileUpload:
      type: object
      properties:
        id:
          type: string
          format: uuid
        filename:
          type: string
        originalName:
          type: string
        mimeType:
          type: string
        size:
          type: number
        url:
          type: string
          format: uri
        uploadedBy:
          type: string
          format: uuid
        uploadedAt:
          type: string
          format: date-time
      required:
        - id
        - filename
        - originalName
        - mimeType
        - size
        - url

    AdminStats:
      type: object
      properties:
        totalUsers:
          type: number
        activeUsers:
          type: number
        totalUploads:
          type: number
        storageUsed:
          type: number
        systemHealth:
          type: object
          properties:
            cpu:
              type: number
            memory:
              type: number
            disk:
              type: number

    LLMRequest:
      type: object
      properties:
        prompt:
          type: string
        model:
          type: string
          default: gpt-3.5-turbo
        maxTokens:
          type: number
          default: 1000
        temperature:
          type: number
          default: 0.7
        parameters:
          type: object
          additionalProperties: true
      required:
        - prompt

    LLMResponse:
      type: object
      properties:
        id:
          type: string
        response:
          type: string
        usage:
          type: object
          properties:
            promptTokens:
              type: number
            completionTokens:
              type: number
            totalTokens:
              type: number
        model:
          type: string
        timestamp:
          type: string
          format: date-time

    PaginationMeta:
      type: object
      properties:
        page:
          type: number
          minimum: 1
        limit:
          type: number
          minimum: 1
          maximum: 100
        total:
          type: number
        totalPages:
          type: number
        hasNext:
          type: boolean
        hasPrev:
          type: boolean

paths:
  # Authentication Endpoints
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT tokens
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  tokens:
                    $ref: '#/components/schemas/AuthTokens'
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Create a new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                username:
                  type: string
                  minLength: 3
                password:
                  type: string
                  minLength: 6
                firstName:
                  type: string
                lastName:
                  type: string
              required:
                - email
                - username
                - password
                - firstName
                - lastName
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  tokens:
                    $ref: '#/components/schemas/AuthTokens'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Get new access token using refresh token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
              required:
                - refreshToken
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Invalidate user session and tokens
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # User Profile Management
  /users/profile:
    get:
      tags:
        - User Profile
      summary: Get user profile
      description: Retrieve current user profile information
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - User Profile
      summary: Update user profile
      description: Update current user profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                username:
                  type: string
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/profile/avatar:
    post:
      tags:
        - User Profile
      summary: Upload avatar
      description: Upload user avatar image
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        '200':
          description: Avatar uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  avatarUrl:
                    type: string
                    format: uri
        '400':
          description: Invalid file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # User Settings
  /users/settings:
    get:
      tags:
        - User Settings
      summary: Get user settings
      description: Retrieve current user settings
      responses:
        '200':
          description: Settings retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - User Settings
      summary: Update user settings
      description: Update current user settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSettings'
      responses:
        '200':
          description: Settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Notifications
  /notifications:
    get:
      tags:
        - Notifications
      summary: List notifications
      description: Get paginated list of user notifications
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: unread
          in: query
          schema:
            type: boolean
            description: Filter unread notifications only
      responses:
        '200':
          description: Notifications retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /notifications/{id}/read:
    put:
      tags:
        - Notifications
      summary: Mark notification as read
      description: Mark a specific notification as read
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Notification marked as read
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '404':
          description: Notification not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /notifications/{id}:
    delete:
      tags:
        - Notifications
      summary: Delete notification
      description: Delete a specific notification
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Notification deleted successfully
        '404':
          description: Notification not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # File Upload
  /files/upload:
    post:
      tags:
        - File Upload
      summary: Upload file
      description: Upload a file (image, PDF, etc.)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                description:
                  type: string
      responses:
        '201':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileUpload'
        '400':
          description: Invalid file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /files/{id}:
    get:
      tags:
        - File Upload
      summary: Download file
      description: Download a file by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: File downloaded successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - File Upload
      summary: Delete file
      description: Delete a file by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: File deleted successfully
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Admin Tools
  /admin/users:
    get:
      tags:
        - Admin Tools
      summary: List all users
      description: Get paginated list of all users (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: search
          in: query
          schema:
            type: string
            description: Search by username or email
        - name: role
          in: query
          schema:
            type: string
            enum: [admin, user, moderator]
            description: Filter by user role
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/users/{id}/role:
    put:
      tags:
        - Admin Tools
      summary: Update user role
      description: Update a user's role (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum: [admin, user, moderator]
              required:
                - role
      responses:
        '200':
          description: User role updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/stats:
    get:
      tags:
        - Admin Tools
      summary: Get system statistics
      description: Get system statistics and health metrics (admin only)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminStats'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/impersonate/{id}:
    post:
      tags:
        - Admin Tools
      summary: Impersonate user
      description: Impersonate another user (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Impersonation successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  tokens:
                    $ref: '#/components/schemas/AuthTokens'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Mail and SMS Service
  /communications/email/send:
    post:
      tags:
        - Communications
      summary: Send email
      description: Send transactional or bulk email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                to:
                  oneOf:
                    - type: string
                      format: email
                    - type: array
                      items:
                        type: string
                        format: email
                subject:
                  type: string
                body:
                  type: string
                isHtml:
                  type: boolean
                  default: false
                templateId:
                  type: string
                templateData:
                  type: object
                  additionalProperties: true
              required:
                - to
                - subject
                - body
      responses:
        '200':
          description: Email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  messageId:
                    type: string
                  status:
                    type: string
                  sentAt:
                    type: string
                    format: date-time
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /communications/sms/send:
    post:
      tags:
        - Communications
      summary: Send SMS
      description: Send SMS message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                to:
                  oneOf:
                    - type: string
                    - type: array
                      items:
                        type: string
                message:
                  type: string
                  maxLength: 160
              required:
                - to
                - message
      responses:
        '200':
          description: SMS sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  messageId:
                    type: string
                  status:
                    type: string
                  sentAt:
                    type: string
                    format: date-time
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Semantic Kernel Tools
  /ai/llm/call:
    post:
      tags:
        - AI Tools
      summary: LLM Call
      description: Make a call to Language Learning Model
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LLMRequest'
      responses:
        '200':
          description: LLM response generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LLMResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: LLM service error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /ai/planner/call:
    post:
      tags:
        - AI Tools
      summary: Planner Call
      description: Make a call to AI planner service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                goal:
                  type: string
                context:
                  type: object
                  additionalProperties: true
                constraints:
                  type: array
                  items:
                    type: string
              required:
                - goal
      responses:
        '200':
          description: Plan generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  plan:
                    type: array
                    items:
                      type: object
                      properties:
                        step:
                          type: number
                        action:
                          type: string
                        description:
                          type: string
                        estimated_time:
                          type: string
                  confidence:
                    type: number
                  timestamp:
                    type: string
                    format: date-time
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /ai/agent/call:
    post:
      tags:
        - AI Tools
      summary: Agent Call
      description: Make a call to AI agent service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                agentType:
                  type: string
                  enum: [assistant, analyzer, generator, validator]
                task:
                  type: string
                input:
                  type: object
                  additionalProperties: true
                parameters:
                  type: object
                  additionalProperties: true
              required:
                - agentType
                - task
                - input
      responses:
        '200':
          description: Agent response generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  result:
                    type: object
                    additionalProperties: true
                  metadata:
                    type: object
                    properties:
                      agentType:
                        type: string
                      executionTime:
                        type: number
                      confidence:
                        type: number
                  timestamp:
                    type: string
                    format: date-time
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /ai/mcp/call:
    post:
      tags:
        - AI Tools
      summary: MCP Call
      description: Make a call to Model Context Protocol service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                method:
                  type: string
                params:
                  type: object
                  additionalProperties: true
                context:
                  type: object
                  additionalProperties: true
              required:
                - method
      responses:
        '200':
          description: MCP response generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  result:
                    type: object
                    additionalProperties: true
                  context:
                    type: object
                    additionalProperties: true
                  timestamp:
                    type: string
                    format: date-time
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: User Profile
    description: User profile management
  - name: User Settings
    description: User preferences and settings
  - name: Notifications
    description: Notification system
  - name: File Upload
    description: File upload and management
  - name: Admin Tools
    description: Administrative tools and user management
  - name: Communications
    description: Email and SMS services
  - name: AI Tools
    description: Semantic kernel and AI services
